// Prisma schema for FuelSync unified database

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  status    String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users     User[]
  stations  Station[]
}

model User {
  id          String   @id @default(uuid())
  tenant_id   String
  email       String
  password_hash String
  name        String
  role        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenant_id], references: [id])
  @@unique([tenant_id, email])
  stations    UserStation[]
  sales       Sale[]
}

model Station {
  id        String   @id @default(uuid())
  tenant_id String
  name      String
  address   String?
  status    String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])
  pumps     Pump[]
  users     UserStation[]
  creditors Creditor[]
  sales     Sale[]
  fuel_prices FuelPrice[]
}

model Pump {
  id        String   @id @default(uuid())
  tenant_id String
  station_id String
  label     String
  serial_number String?
  status    String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  station   Station  @relation(fields: [station_id], references: [id])
  nozzles   Nozzle[]
}

model Nozzle {
  id        String   @id @default(uuid())
  tenant_id String
  pump_id   String
  nozzle_number Int
  fuel_type String
  status    String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  pump      Pump     @relation(fields: [pump_id], references: [id])
  readings  NozzleReading[]
  sales     Sale[]
}

model NozzleReading {
  id        String   @id @default(uuid())
  tenant_id String
  nozzle_id String
  reading   Decimal
  recorded_at DateTime
  payment_method String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  nozzle    Nozzle   @relation(fields: [nozzle_id], references: [id])
}

model FuelPrice {
  id           String   @id @default(uuid())
  tenant_id    String
  station_id   String
  fuel_type    String
  price        Decimal
  cost_price   Decimal?
  valid_from   DateTime
  effective_to DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  station      Station  @relation(fields: [station_id], references: [id])
}

model UserStation {
  user_id    String
  station_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  station    Station  @relation(fields: [station_id], references: [id])
  @@id([user_id, station_id])
}

model Creditor {
  id           String   @id @default(uuid())
  tenant_id    String
  station_id   String?
  party_name   String
  contact_number String?
  address      String?
  credit_limit Decimal  @default(0)
  status       String   @default("active")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  station      Station? @relation(fields: [station_id], references: [id])
  sales        Sale[]
}

model Sale {
  id           String   @id @default(uuid())
  tenant_id    String
  nozzle_id    String
  reading_id   String?
  station_id   String
  volume       Decimal
  fuel_type    String
  fuel_price   Decimal
  cost_price   Decimal  @default(0)
  amount       Decimal
  profit       Decimal  @default(0)
  payment_method String
  creditor_id  String?
  created_by   String?
  status       String   @default("posted")
  recorded_at  DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  nozzle       Nozzle   @relation(fields: [nozzle_id], references: [id])
  station      Station  @relation(fields: [station_id], references: [id])
  creditor     Creditor? @relation(fields: [creditor_id], references: [id])
  creator      User?    @relation(fields: [created_by], references: [id])
}
